using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ServiceProcess;
using System.IO;
using System.Configuration;


namespace QDI
{
  class Program
  {
    private const string APP_NAME = "ServicesChecker";
    private static string RootProgramFilesLocation = (Directory.Exists(@"C:\QDI\BK")) ? @"C:\QDI\BK\" : @"C:\QDI\FS\";

    static void Main(string[] args)
    {
      try
      {
        string strService = ConfigurationManager.AppSettings["Services"];

        if (string.IsNullOrEmpty(strService))
        {
          LogThat("Service name is empty or null.", true);
          return;
        }

        List<string> lstServices = strService.Split(',').Select(item => item.Trim()).ToList();

        bool allRunning = true;

        foreach (string item in lstServices)
        {
          Service service = new Service
          {
            Name = item,
            LastUpdated = DateTime.Now,
          };

          string serviceName = null;
          try { serviceName = new ServiceController(item).DisplayName; }
          catch (Exception ex)
          {
            service.Reason = $"{item} is missing";
            allRunning = false;

            InsertServiceStatus(service);
            LogThat($"{APP_NAME} Service '{item}' does not exist. {ex.Message}", true);

            continue;
          } 

          ServiceController sc = new ServiceController(item);

          if (sc.Status != ServiceControllerStatus.Running)
          {
            service.Reason = $"{sc.DisplayName} is not running";
            allRunning = false;
            InsertServiceStatus(service);
          }
          else
          {
            AlertCheck(service);
          }

        }
        if (allRunning)
        {
          LogThat($"{APP_NAME} ran successfully. No service offline was found", true);
        }
      }
      catch (Exception ex)
      {
        LogThat(ex.ToString(), true);
      }
      
    }

    //The alert is added to the mbd file so it can be pulled 
    private static bool InsertServiceStatus(Service thisService)
    {
      clsDBConnectionODBC dbStoreSettings = new clsDBConnectionODBC(RootProgramFilesLocation + @"Data\StoreData.mdb");

      try
      {
        string selectSQL = "SELECT COUNT(var_servicename) FROM tb_ServicesStatus WHERE var_servicename = '" + thisService.Name + "';";
        int intSelect = Convert.ToInt32(dbStoreSettings.GetSingleValue(selectSQL));

        if (intSelect == 0)
        {
          LogThat("", true);
          string insertSQL = "INSERT INTO tb_ServicesStatus VALUES("
                                   + "'" + thisService.Name + "', "
                                   + "#" + thisService.LastUpdated + "#, "
                                   + "'" + thisService.Reason + "');";
          dbStoreSettings.ExecuteSQL(insertSQL);
          dbStoreSettings.Commit();

          LogThat("insert into MDB with: " + insertSQL);
        }
      }
      catch (Exception ex)
      {
        dbStoreSettings.RollBack();
        LogThat(ex.ToString());
        return false;
      }
      return true;
    }    

    //Checks if the alert already exist so is not duplicated or to remove the alert if the service is running
    private static void AlertCheck(Service thisService)
    {   
      try
      {
        clsDBConnectionODBC dbStoreSettings = new clsDBConnectionODBC(RootProgramFilesLocation + @"Data\StoreData.mdb");
        string selectSQL = "SELECT COUNT(var_servicename) FROM tb_ServicesStatus WHERE var_servicename ="
                         + " '" + thisService.Name + "' AND "
                         + "#" + thisService.LastUpdated + "# ;";

        int intSelect = Convert.ToInt32(dbStoreSettings.GetSingleValue(selectSQL));

        // If the service shows in the offline, remove it from the mdb .
        if (intSelect > 0)
        {
          clsDBConnectionODBC dbStoreSettings1 = new clsDBConnectionODBC(RootProgramFilesLocation + @"Data\StoreData.mdb");
          string deleteSQL = "DELETE FROM tb_ServicesStatus WHERE var_servicename = '" + thisService.Name + "';";
          dbStoreSettings1.ExecuteSQL(deleteSQL);
          dbStoreSettings1.Commit();

          LogThat("deleted MDB with: " + deleteSQL);
        }
      }
      catch (Exception ex)
      {
        LogThat(ex.ToString());
      }
    }

    //Logs the data into a log file
    private static void LogThat(string Message, bool IsError = false)
    {// LOGGING FOR THAT 
      string debugFlag = ConfigurationManager.AppSettings["Debug"];

      if ((debugFlag != null && debugFlag.ToUpper().StartsWith("T")) || IsError)
      {
        string logFilePathName = @"C:\QDI\BK\Data\logs\" + APP_NAME + "_" + DateTime.Today.ToString("yyyy-MM-dd") + ".log";

        if (!File.Exists(logFilePathName))
        {
          using (TextWriter tw = new StreamWriter(new FileStream(logFilePathName, FileMode.CreateNew, FileAccess.Write, FileShare.ReadWrite)))
          {
            tw.WriteLine(DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss.ffff") + " : " + Message);
          }
        }
        else
        {
          using (TextWriter tw = new StreamWriter(new FileStream(logFilePathName, FileMode.Append, FileAccess.Write, FileShare.ReadWrite)))
          {
            tw.WriteLine(DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss.ffff") + " : " + Message);
          }
        }
      }
    }
  }
}

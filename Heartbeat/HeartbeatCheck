using QDI;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;

namespace HeartbeatCheck
{
  internal class HBAlert
  {
    internal string description { get; set; }
    internal string title { get; set; }
  }
  class Program
  {
    private static clsDBConnection dbQDI = new clsDBConnection(clsDBConnection.DBs.QDIProd);
    private const string APP_NAME = "QDIHeartbeatMonitor";
    private const string HB_FILETYPE = "HB";
    private const string BD_FILETYPE = "BD";
    private const string ATS_FILETYPE = "ATS";
    private const string CNT_FILETYPE = "CNT";

    static void Main(string[] args)
    {
      if (args.Length > 0) { }

      StartHB();
    }

    private static void StartHB()
    {
      foreach (Entity Concept in OrgChart.GetAllConcepts().Where(x => x.Concept.IsActive == true && x.Concept.ServiceType == "QS"))
      {
        foreach (Entity Store in OrgChart.GetAllEntities(Concept.EntityID, false).Where(x => x.Store != null).ToList())
        {
          try
          {
            if (!Store.Store.IsTempClosed(DateTime.Today))
            {
              if (CheckHeartbeat(Store.Store, HB_FILETYPE, 5)) // Only if the heatbeat is running it will go through the other checkheartbeats
              {
                if (DateTime.Now.Hour != 4)
                {
                  CheckHeartbeat(Store.Store, BD_FILETYPE, 1470);
                }
                CheckHeartbeat(Store.Store, ATS_FILETYPE, 10);
                CheckHeartbeat(Store.Store, CNT_FILETYPE, 70);
              }
              else
              {
                UpdateEnd(Store.Store, BD_FILETYPE);
                UpdateEnd(Store.Store, ATS_FILETYPE);
                UpdateEnd(Store.Store, CNT_FILETYPE);
              }
            }
          }
          catch (Exception ex)
          {
            dbQDI.RollBack();
            InsertError(Store.Store.ConceptShortName + Store.Store.Number, $"Error in StartHB: {ex.Message}");
          }
        }
      }
    }

    private static bool CheckHeartbeat(QDI.Store StoreToCheck, string TypeToCheck, int MinutesToCheck)
    {
      try
      {
        string strSQL = "SELECT dte_Business + ((:TZO / 24) * -1) FROM tb_StoreWSPolling "
                    + "WHERE num_Concept = :CONCEPT "
                    + "AND num_Store = :STORE "
                    + "AND car_FileType = :FILETYPE "
                    + "AND dte_Business <= SysDate - (:MINUTES / 1440) + (:TZO / 24)  "
                    + "UNION "
                    + "SELECT TO_DATE('01-01-1000 00:00:00','DD-MM-YYYY HH24:MI:SS') FROM Dual "
                    + "WHERE NOT EXISTS (SELECT 'X' FROM tb_StoreWSPolling "
                                      + "WHERE num_Concept = :CONCEPT "
                                      + "AND num_Store = :STORE "
                                      + "AND car_FileType = :FILETYPE) ";

        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "CONCEPT", clsDBConnection.ParamTypes.ParamNum, StoreToCheck.ConceptID, 1);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "STORE", clsDBConnection.ParamTypes.ParamNum, StoreToCheck.Number, 6);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "FILETYPE", clsDBConnection.ParamTypes.ParamChar, TypeToCheck, 3);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "TZO", clsDBConnection.ParamTypes.ParamNum, StoreToCheck.TimeZoneOffset);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "MINUTES", clsDBConnection.ParamTypes.ParamNum, MinutesToCheck);

        object storeHB = dbQDI.GetSingleValue(strSQL);

        if (storeHB != null && storeHB != DBNull.Value && DateTime.TryParse(storeHB.ToString(), out DateTime dtheartbeart))
        {
          SendAlert(StoreToCheck, TypeToCheck, dtheartbeart);
          return false; // make the alert
        }
        else
        {
          UpdateEnd(StoreToCheck, TypeToCheck);
          return true; // no alert needed 
        }
      }
      catch (Exception ex)
      {
        InsertError(StoreToCheck.ConceptShortName + StoreToCheck.Number, $"Error in CheckHeartbeat: {ex.Message}");
        return false;
      }
    }

    private static void SendAlert(QDI.Store store, string TypeToCheck, DateTime lastsuccess)
    {
      try
      {
        HBAlert hbAlert = GetTitleAndDescription(TypeToCheck);

        string strSQL1 = "SELECT uid_alertid FROM tb_Alerts "
                       + "WHERE num_Concept = :CONCEPT "
                       + "AND num_Store = :STORE "
                       + "AND var_Title = :TITLE "
                       + "AND var_Alerttype = :TYPE "
                       + "AND dte_End IS NULL ";

        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "CONCEPT", clsDBConnection.ParamTypes.ParamNum, store.ConceptID, 1);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "STORE", clsDBConnection.ParamTypes.ParamNum, store.Number, 6);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "TITLE", clsDBConnection.ParamTypes.ParamString, hbAlert.title, 50);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLSelect, "TYPE", clsDBConnection.ParamTypes.ParamChar, HB_FILETYPE, 2);

        object storeAlert = dbQDI.GetSingleValue(strSQL1);
        Guid? guidAlert = null;
        if (storeAlert != null && storeAlert != DBNull.Value)
        {
          guidAlert = dbQDI.RawToGuid(storeAlert);
        }

        string strSQL = "";
        if (guidAlert == null)
        {
          strSQL = "INSERT INTO tb_Alerts "
                 + "(uid_Alertid, num_Concept, num_Store, dte_Start, var_Alerttype, var_Title, var_Description) "
                 + "VALUES (SYS_GUID(), :CONCEPT, :STORE, :STARTDATE, :TYPE, :TITLE, :DESCRIPTION)";

          dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "CONCEPT", clsDBConnection.ParamTypes.ParamNum, store.ConceptID, 1);
          dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "STORE", clsDBConnection.ParamTypes.ParamNum, store.Number, 6);
          dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "STARTDATE", clsDBConnection.ParamTypes.ParamDate, lastsuccess);
          dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "TYPE", clsDBConnection.ParamTypes.ParamChar, HB_FILETYPE, 2);
          dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "TITLE", clsDBConnection.ParamTypes.ParamString, hbAlert.title, 50);

        }
        else
        {
          strSQL = "UPDATE tb_Alerts SET var_Description = :DESCRIPTION "
                 + "WHERE uid_alertid = :ALERTID";

          dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "ALERTID", clsDBConnection.ParamTypes.ParamGuid, guidAlert.Value);
        }

        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "DESCRIPTION", clsDBConnection.ParamTypes.ParamString,
                       hbAlert.description + lastsuccess.ToString("g"), 4000);

        dbQDI.ExecuteSQL(strSQL);
        dbQDI.Commit();
      }
      catch (Exception ex)
      {
        dbQDI.RollBack();
        InsertError(store.ConceptShortName + store.Number, $"Error in SendAlert: {ex.Message}");
      }
    }

    //If the type of alert is back online it will set an end date to remove the alert from the dashboard
    private static void UpdateEnd(QDI.Store store, string TypeToCheck)
    {
      try
      {
        HBAlert hbAlert = GetTitleAndDescription(TypeToCheck);

        string strSQL = "UPDATE tb_Alerts SET dte_End = sysdate "
                      + "WHERE num_Concept = :CONCEPT AND num_Store = :STORE AND var_Alerttype = :ALERTTYPE  AND var_title = :ALERTTITLE AND dte_end IS NULL";

        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "CONCEPT", clsDBConnection.ParamTypes.ParamNum, store.ConceptID, 1);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "STORE", clsDBConnection.ParamTypes.ParamNum, store.Number, 6);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "ALERTTYPE", clsDBConnection.ParamTypes.ParamString, HB_FILETYPE, 2);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "ALERTTITLE", clsDBConnection.ParamTypes.ParamString, hbAlert.title, 50);

        dbQDI.ExecuteSQL(strSQL);
        dbQDI.Commit();
      }
      catch (Exception ex)
      {
        dbQDI.RollBack();
        InsertError(store.ConceptShortName + store.Number, $"Error in UpdateEnd: {ex.Message}");
      }
    }

    private static HBAlert GetTitleAndDescription (string TypeToCheck)
    {
      //Depending of the alert it will have different description and title for the alert 
      HBAlert hbAlert = new HBAlert();
      
      switch (TypeToCheck)
      {

        case HB_FILETYPE: // Compare TypeToCheck with the constant HB_FILETYPE
          hbAlert.title = "No Heartbeat";
          hbAlert.description = "No heartbeat since ";
          break;

        case BD_FILETYPE:// Compare TypeToCheck with the constant BD_FILETYPE
          hbAlert.title = "Business Date";
          hbAlert.description = "Last business date update ";
          break;

        case ATS_FILETYPE: // Compare TypeToCheck with the constant ATS_FILETYPE
          hbAlert.title = "Automatic Scheduling Service";
          hbAlert.description = "Automatic Scheduling Service has not checked for updates since ";
          break;

        case CNT_FILETYPE: // Compare TypeToCheck with the constant CNT_FILETYPE
          hbAlert.title = "BOH dashboard";
          hbAlert.description = "BOH dashboard not updating since ";
          break;

        default:
          hbAlert.title = "HB Error";
          hbAlert.description = "HB Error";
          break;
      }
      return hbAlert;
    }

    private static void InsertError(string UserID, string exceptionMessage)
    {
      try
      {
        string strSQL = "INSERT INTO tb_webserviceerrors (var_user, var_clientapp, dte_error, var_desc) "
                      + "VALUES (:USERID, :CLIENTAPP , :DTEERROR, :ERROR)";

        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "USERID", clsDBConnection.ParamTypes.ParamString, UserID, 20);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "CLIENTAPP", clsDBConnection.ParamTypes.ParamString, APP_NAME, 30);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "DTEERROR", clsDBConnection.ParamTypes.ParamDate, DateTime.Now);
        dbQDI.AddParam(clsDBConnection.SQLTypes.SQLUpdate, "ERROR", clsDBConnection.ParamTypes.ParamString, exceptionMessage, 4000);

        dbQDI.ExecuteSQL(strSQL);
        dbQDI.Commit();
      }
      catch (Exception)
      {
        dbQDI.RollBack();
      }
    }
  }
}
